name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  security-checks:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security checks
        run: |
          echo "🔍 Running security checks..."
          
          # Check for exposed secrets/API keys
          echo "Checking for exposed secrets..."
          if grep -r "SUPABASE_ANON_KEY\|SUPABASE_URL" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" --exclude="config.js.example" | grep -v "CONFIG\." | grep -v "// "; then
            echo "❌ Potential hardcoded secrets found!"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi
          
          # Check for sensitive files
          echo "Checking for sensitive files..."
          SENSITIVE_FILES=(".env" "config.js" ".env.local" "secrets.json")
          for file in "${SENSITIVE_FILES[@]}"; do
            if [[ -f "$file" && "$file" != "config.js" ]]; then
              echo "❌ Sensitive file found: $file"
              exit 1
            fi
          done
          echo "✅ No sensitive files in package"
          
          # Verify required files exist
          echo "Verifying required files..."
          REQUIRED_FILES=("manifest.json" "background/service-worker.js" "popup/index.html")
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"

  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Validate manifest.json
        run: |
          echo "📋 Validating manifest.json..."
          if ! jq empty manifest.json; then
            echo "❌ Invalid JSON in manifest.json"
            exit 1
          fi
          
          # Check required manifest fields
          VERSION=$(jq -r '.version' manifest.json)
          NAME=$(jq -r '.name' manifest.json)
          if [[ -z "$VERSION" || -z "$NAME" ]]; then
            echo "❌ Missing required fields in manifest.json"
            exit 1
          fi
          
          echo "✅ Manifest validation passed"
          echo "📦 Extension: $NAME v$VERSION"
      
      - name: Check JavaScript syntax
        run: |
          echo "🔧 Checking JavaScript syntax..."
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" -exec node -c {} \;
          echo "✅ JavaScript syntax check passed"

  build-extension:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from manifest
        id: get_version
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"
      
      - name: Create extension package
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Package the extension
          ZIP_NAME="soulmark-extension-v${{ steps.get_version.outputs.version }}.zip"
          
          # Create zip with only necessary files
          zip -r "dist/$ZIP_NAME" \
            manifest.json \
            background/ \
            content-scripts/ \
            popup/ \
            options/ \
            styles/ \
            assets/ \
            shared/ \
            config.js \
            -x "*.DS_Store" \
            -x "*/.DS_Store" \
            -x "*.swp" \
            -x "*~" \
            -x "*.map" \
            -x "*/test/*" \
            -x "*/tests/*"
          
          echo "✅ Created package: dist/$ZIP_NAME"
          echo "📊 Size: $(du -h "dist/$ZIP_NAME" | cut -f1)"
          
          # List contents for verification
          echo "📋 Package contents:"
          unzip -l "dist/$ZIP_NAME" | head -30
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: soulmark-extension-v${{ steps.get_version.outputs.version }}
          path: dist/soulmark-extension-v${{ steps.get_version.outputs.version }}.zip
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-extension
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: soulmark-extension-v${{ steps.get_version.outputs.version }}
          path: ./dist
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/soulmark-extension-v${{ steps.get_version.outputs.version }}.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🎯 Soulmark v${{ steps.get_version.outputs.version }}
            
            ### Installation
            1. Download the extension package below
            2. Go to Chrome Web Store Developer Dashboard
            3. Upload the new version
            
            ### What's Changed
            See the auto-generated release notes below for all changes.
            
            ---
            *Built with GitHub Actions 🤖*